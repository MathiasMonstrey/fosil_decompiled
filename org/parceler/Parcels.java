package org.parceler;

import android.os.Parcelable;
import java.lang.reflect.Constructor;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import org.parceler.NonParcelRepository.C5171t;

public final class Parcels {
    public static final String IMPL_EXT = "Parcelable";
    private static final C5179a REPOSITORY = new C5179a();

    public interface ParcelableFactory<T> {
        public static final String BUILD_PARCELABLE = "buildParcelable";

        Parcelable buildParcelable(T t);
    }

    static final class C5179a {
        private ConcurrentMap<Class, ParcelableFactory> dWn;

        private C5179a() {
            this.dWn = new ConcurrentHashMap();
        }

        public ParcelableFactory ao(Class cls) {
            ParcelableFactory parcelableFactory = (ParcelableFactory) this.dWn.get(cls);
            if (parcelableFactory != null) {
                return parcelableFactory;
            }
            ParcelableFactory aq = aq(cls);
            if (Parcelable.class.isAssignableFrom(cls)) {
                aq = new C5171t();
            }
            if (aq == null) {
                throw new ParcelerRuntimeException("Unable to find generated Parcelable class for " + cls.getName() + ", verify that your class is configured properly and that the Parcelable class " + C5179a.ap(cls) + " is generated by Parceler.");
            }
            parcelableFactory = (ParcelableFactory) this.dWn.putIfAbsent(cls, aq);
            if (parcelableFactory == null) {
                return aq;
            }
            return parcelableFactory;
        }

        private static String ap(Class cls) {
            return cls.getName() + "$$" + Parcels.IMPL_EXT;
        }

        public ParcelableFactory aq(Class cls) {
            try {
                return new C5180b(cls, Class.forName(C5179a.ap(cls)));
            } catch (ClassNotFoundException e) {
                return null;
            }
        }

        public void m16374a(Repository<ParcelableFactory> repository) {
            this.dWn.putAll(repository.get());
        }
    }

    static final class C5180b<T> implements ParcelableFactory<T> {
        private final Constructor<? extends Parcelable> constructor;

        public C5180b(Class<T> cls, Class<? extends Parcelable> cls2) {
            try {
                this.constructor = cls2.getConstructor(new Class[]{cls});
            } catch (Exception e) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", e);
            }
        }

        public Parcelable buildParcelable(T t) {
            try {
                return (Parcelable) this.constructor.newInstance(new Object[]{t});
            } catch (Exception e) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", e);
            } catch (Exception e2) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", e2);
            } catch (Exception e22) {
                throw new ParcelerRuntimeException("Unable to create ParcelFactory Type", e22);
            }
        }
    }

    static {
        REPOSITORY.m16374a(NonParcelRepository.aHV());
    }

    private Parcels() {
    }

    public static <T> Parcelable wrap(T t) {
        if (t == null) {
            return null;
        }
        return wrap(t.getClass(), t);
    }

    public static <T> Parcelable wrap(Class<? extends T> cls, T t) {
        if (t == null) {
            return null;
        }
        return REPOSITORY.ao(cls).buildParcelable(t);
    }

    public static <T> T unwrap(Parcelable parcelable) {
        if (parcelable == null) {
            return null;
        }
        return ((ParcelWrapper) parcelable).getParcel();
    }
}
